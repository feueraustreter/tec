/*print 1+1
print 2+2
print 3+3

print "3" + 3+(3+3)
print "3" + 3+(3+(3+3))

print "3" + 3+(3+3)+(3+6)
print (3+3) + "3"
print "3" + 3 + ( "3" + 3 ) + (3+6)

print true
print 1 || 2
print 1 == 2 || 2 == 2*/

/*print  1 == 2
print 1 == 2 || 1 == 1
print 1 == 1 && 1 == 2
print false !!
print true x| true
print true x| false
print false x| false
print false n| false
print false n| true*/

/*
print « false == true || « true == true || false » » && false
print « false == true || « true == true || false » » && true
*/


/*
var string = "test"
var num = 1+1
var bool = << false == true || << true == true || false >> >> && false

print string

sleep 1000

num = 3
print num
*/

/*
var i = 0

if (i == 0) {
    print "is zero"
    var b = false
    print b
    if (b) {
        print b
        var j = 0
    }
    print j
} else if (i == 1) {
    print "is one"
} else {
    print "is not zero or one"
}

print "hi"

var b = false
var c = true
print b
if (b || c) {
    print b || c
    var j = 0
}*/

/*
var i = 0
while (i < 2) {
    print "Current Index: " + i
    i = i + 1
}
while (i > 0) {
    print "Current Index: " + i
    i = i - 1
}*/

/*
test()
test(1)
test("Hello")
test("Hello", "World")

func test() {
    print "empty"
}

func test(*int i) {
    print "Number: " + i
}

func test(*string i) -> *string {
    print "String: " + i
    return "String: " + i
}

func test(*string i, *string j) {
    print i + " " + j
}*/

/*
help(3)

func help(*int i) {
    print "Current value: " + i
    if (i > 0) {
        help(i - 1)
    }
    print "end" + i
}*/

/*
print "Hello"
return
print "World"
*/

/*
print "TEST POINT1"
test(1)
print "TEST POINT2"
test()
print "TEST POINT4"

func test(*int i) -> *int {
    print i
    return i + 1
}

func test() {
    print "TEST POINT3"
    return
}*/

/*
func test(*int i) -> *int {
    return i * 2
}

var j = 2
print test(j) + test(j + 1)*/

/*
func DrawRectangle(renderer *sdl.Renderer, startPosX int32, startPosY int32, endPosX int32, endPosY int32, red uint8, green uint8, blue uint8, alpha uint8) {
func DrawEmptyRectangle(renderer *sdl.Renderer, startPosX int32, startPosY int32, endPosX int32, endPosY int32) {
func LoadBMP(fileName string, renderer *sdl.Renderer) (texture *sdl.Texture) {
func LoadPNG(fileName string, renderer *sdl.Renderer) (texture *sdl.Texture) {
func RenderTexture(renderer *sdl.Renderer, texture *sdl.Texture, startPosX int32, startPosY int32, endPosX int32, endPosY int32) {
func UpdateScreen(renderer *sdl.Renderer) {
func GetWindowSize(window *sdl.Window) (sizeX int32, sizeY int32) {
func setResizable(window *sdl.Window, resizable bool) {
func UpdateMouseState(oldMouseState *MouseState) {
func CreateMouseState() (mouseState MouseState) {
func GetAreaClicked(startPosX int32, startPosY, int32, endPosX int32, endPosY int32, typeOfClick bool, currentMouseData *MouseState) (gotClicked bool) {
*/

/*
// Function Declaration with return type of *int
func intReturn(*int i) -> *int {
    return i^i
}

// Print the result for Input 0  to 9
var i = 0
while (i < 10) {
    print intReturn(i)
    i = i + 1
}
*/

func String() -> *str {
    return ""
}

func String(*chr char) -> *str {
    return char + ""
}

func String(*str string) -> *str {
    return string
}

func String(*num number) -> *str {
    return number + ""
}

func String(*int integer) -> *str {
    return integer + ""
}

func String(*bol boolean) -> *str {
    return boolean + ""
}

func Character() -> *chr {
    return ''
}

func Character(*chr char) -> *chr {
    return char
}

func Character(*str string) -> *chr {
    cast *chr casted string
    return casted
}

func Character(*num number) -> *chr {
    cast *chr casted number
    return casted
}

func Character(*int integer) -> *chr {
    cast *chr casted integer
    return casted
}

func Character(*bol boolean) -> *chr {
    cast *chr casted boolean
    return casted
}

func Number() -> *num {
    return 0.0
}

func Number(*chr char) -> *num {
    cast *num casted char
    return casted
}

func Number(*str string) -> *num {
    cast *num casted string
    return casted
}

func Number(*num number) -> *num {
    return number
}

func Number(*int integer) -> *num {
    return integer + 0.0
}

func Number(*bol boolean) -> *num {
    cast *num casted boolean
    return casted
}

func Integer() -> *int {
    return 0
}

func Integer(*chr char) -> *int {
    cast *int casted char
    return casted
}

func Integer(*str string) -> *int {
    cast *int casted string
    return casted
}

func Integer(*num number) -> *int {
    cast *int casted number
    return casted
}

func Integer(*int integer) -> *int {
    return integer
}

func Integer(*bol boolean) -> *int {
    cast *num casted boolean
    return casted
}

func Boolean() -> *bol {
    return false
}

func Boolean(*chr char) -> *bol {
    cast *bol casted char
    return casted
}

func Boolean(*str string) -> *bol {
    cast *bol casted string
    return casted
}

func Boolean(*num number) -> *bol {
    cast *bol casted number
    return casted
}

func Boolean(*int integer) -> *bol {
    cast *bol casted integer
    return casted
}

func Boolean(*bol boolean) -> *bol {
    return boolean
}

func round(*num toRound, *int digits) -> *num {
    var x = 10 ^ digits
    var r = toRound * x
    var t = r - Integer(r)

    if (t >= 0.5) {
        return ((Number(Integer(r))) + 1) / x
    }
    return ((Number(Integer(r))) + 0) / x
}

print round(0.55, 0)
print round(0.55, 1)
print round(0.55, 2)

print Number("1")