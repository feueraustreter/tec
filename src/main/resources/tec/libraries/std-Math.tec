import std:Casting

// Constants

let PI                 = 3.14159265358979323846
let E                  = 2.7182818284590452354
let DEGREES_TO_RADIANS = 0.017453292519943295
let RADIANS_TO_DEGREES = 57.29577951308232

let INTEGER_MAX_VALUE  =  2147483647
let INTEGER_MIN_VALUE  = -2147483647

// Rounding numbers

func round(*num toRound, *int digits) -> *num {
    var x = 10 ^ digits
    var r = toRound * x
    var t = r - Integer(r)

    if (t >= 0.5) {
        return ((Number(Integer(r))) + 1) / x
    } else {
        return ((Number(Integer(r))) + 0) / x
    }
}

func round(*num toRound, *num digits) -> *num {
    var x = 10 ^ Integer(digits)
    var r = toRound * x
    var t = r - Integer(r)

    if (t >= 0.5) {
        return ((Number(Integer(r))) + 1) / x
    } else {
        return ((Number(Integer(r))) + 0) / x
    }
}


func floor(*num toFloor) -> *num {
    return Number(Integer(toFloor))
}

func floor(*num toFloor, *int digits) -> *num {
    var x = 10 ^ digits
    return Number(Integer(toFloor * x)) / x
}

func floor(*num toFloor, *num digits) -> *num {
    var x = 10 ^ Integer(digits)
    return Number(Integer(toFloor * x)) / x
}


func ceil(*num toCeil) -> *num {
    return Number(Integer(toCeil)) + 1
}

func ceil(*num toCeil, *int digits) -> *num {
    var x = 10 ^ digits
    return (Number(Integer(toCeil * x)) + 1) / x
}

func ceil(*num toCeil, *num digits) -> *num {
    var x = 10 ^ Integer(digits)
    return (Number(Integer(toCeil * x)) + 1) / x
}

// Multiple it calculates how often something goes into something else.

func multiple(*int a, *int b) -> *int {
    return (a - (a % b)) / b
}

func multiple(*int a, *num b) -> *num {
    return (a - (a % b)) / b
}

func multiple(*num a, *int b) -> *num {
    return (a - (a % b)) / b
}

func multiple(*num a, *num b) -> *num {
    return (a - (a % b)) / b
}

// Pythagoras calculates the distance between x1 x2 y1 y2

func pythagoras(*int x1, *int x2, *int y1, *int y2) -> *int {
    var x = (x1 - x2)
    x = x * x
    var y = (y1 - y2)
    y = y * y
    var p = x + y
    return 2rootp
}

func pythagoras(*num x1, *num x2, *num y1, *num y2) -> *num {
    var x = (x1 - x2)
    x = x * x
    var y = (y1 - y2)
    y = y * y
    var p = x + y
    return 2rootp
}

// Radians and Degree

func toRadians(*num angdeg) -> *num {
    return angdeg * DEGREES_TO_RADIANS
}

func toDegree(*num angrad) -> *num {
    return angrad * RADIANS_TO_DEGREES
}

// Max / Min

func max(*int int1, *int int2) -> *int {
    if (int1 > int2) {
        return int1
    }
    return int2
}

func max(*num int1, *int int2) -> *num {
    if (int1 > int2) {
        return int1
    }
    return int2 + 0.0
}

func max(*int int1, *num int2) -> *num {
    if (int1 > int2) {
        return int1 + 0.0
    }
    return int2
}

func max(*num int1, *num int2) -> *num {
    if (int1 > int2) {
        return int1
    }
    return int2
}

func min(*int int1, *int int2) -> *int {
    if (int1 < int2) {
        return int1
    }
    return int2
}

func min(*num int1, *int int2) -> *num {
    if (int1 < int2) {
        return int1
    }
    return int2 + 0.0
}

func min(*int int1, *num int2) -> *num {
    if (int1 < int2) {
        return int1 + 0.0
    }
    return int2
}

func min(*num int1, *num int2) -> *num {
    if (int1 < int2) {
        return int1
    }
    return int2
}

// What sign the number has

func sign(*int int) -> *int {
    if (int > 0) {
        return 1
    }
    if (int < 0) {
        return -1
    } else {
        return 0
    }
}

func sign(*num num) -> *int {
    if (num > 0) {
        return 1
    }
    if (num < 0) {
        return -1
    } else {
        return 0
    }
}

// Clamp Number between Range

func clamp(*int toClamp, *int bottom, *int top) -> *int {
    if (toClamp > top) {
        return top
    }
    if (toClamp < bottom) {
        return bottom
    } else {
        return toClamp
    }
}

func clamp(*num toClamp, *num bottom, *num top) -> *num {
    if (toClamp > top) {
        return top
    }
    if (toClamp < bottom) {
        return bottom
    } else {
        return toClamp
    }
}

// Random

func random() {

}

// IsPrime

func isPrime(*int i) -> *bol {
    if (i <= 1) {
        return false
    }
    if (i == 2) {
        return true
    }
    if (i % 2 == 0) {
        return false
    }
    var j = 2 root i
    var r = 2
    while (r < j - 1) {
        if (r % 2 == 0) {
            r = r + 1
        }
        if (i % r == 0) {
            return false
        }
        r = r + 1
    }
    return true
}

// Factorial

func factorial(*int i) -> *int {
    var j = i
    while (i > 0) {
        i--
        j *= i
    }
    return j
}